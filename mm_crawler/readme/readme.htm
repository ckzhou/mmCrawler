<!DOCTYPE html>
<html><head>
<title>readme</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style type="text/css">
/* GitHub stylesheet for MarkdownPad (http://markdownpad.com) */
/* Author: Nicolas Hery - http://nicolashery.com */
/* Version: b13fe65ca28d2e568c6ed5d7f06581183df8f2ff */
/* Source: https://github.com/nicolahery/markdownpad-github */

/* RESET
=============================================================================*/

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
}

/* BODY
=============================================================================*/

body {
  font-family: Helvetica, arial, freesans, clean, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
  padding: 20px;
  max-width: 960px;
  margin: 0 auto;
}

body>*:first-child {
  margin-top: 0 !important;
}

body>*:last-child {
  margin-bottom: 0 !important;
}

/* BLOCKS
=============================================================================*/

p, blockquote, ul, ol, dl, table, pre {
  margin: 15px 0;
}

/* HEADERS
=============================================================================*/

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
}

h1 tt, h1 code, h2 tt, h2 code, h3 tt, h3 code, h4 tt, h4 code, h5 tt, h5 code, h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: #000;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #ccc;
  color: #000;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777;
  font-size: 14px;
}

body>h2:first-child, body>h1:first-child, body>h1:first-child+h2, body>h3:first-child, body>h4:first-child, body>h5:first-child, body>h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1+p, h2+p, h3+p, h4+p, h5+p, h6+p {
  margin-top: 10px;
}

/* LINKS
=============================================================================*/

a {
  color: #4183C4;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* LISTS
=============================================================================*/

ul, ol {
  padding-left: 30px;
}

ul li > :first-child, 
ol li > :first-child, 
ul li ul:first-of-type, 
ol li ol:first-of-type, 
ul li ol:first-of-type, 
ol li ul:first-of-type {
  margin-top: 0px;
}

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt>:first-child {
  margin-top: 0px;
}

dl dt>:last-child {
  margin-bottom: 0px;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd>:first-child {
  margin-top: 0px;
}

dl dd>:last-child {
  margin-bottom: 0px;
}

/* CODE
=============================================================================*/

pre, code, tt {
  font-size: 12px;
  font-family: Consolas, "Liberation Mono", Courier, monospace;
}

code, tt {
  margin: 0 0px;
  padding: 0px 0px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre>code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}

kbd {
    -moz-border-bottom-colors: none;
    -moz-border-left-colors: none;
    -moz-border-right-colors: none;
    -moz-border-top-colors: none;
    background-color: #DDDDDD;
    background-image: linear-gradient(#F1F1F1, #DDDDDD);
    background-repeat: repeat-x;
    border-color: #DDDDDD #CCCCCC #CCCCCC #DDDDDD;
    border-image: none;
    border-radius: 2px 2px 2px 2px;
    border-style: solid;
    border-width: 1px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    line-height: 10px;
    padding: 1px 4px;
}

/* QUOTES
=============================================================================*/

blockquote {
  border-left: 4px solid #DDD;
  padding: 0 15px;
  color: #777;
}

blockquote>:first-child {
  margin-top: 0px;
}

blockquote>:last-child {
  margin-bottom: 0px;
}

/* HORIZONTAL RULES
=============================================================================*/

hr {
  clear: both;
  margin: 15px 0;
  height: 0px;
  overflow: hidden;
  border: none;
  background: transparent;
  border-bottom: 4px solid #ddd;
  padding: 0;
}

/* TABLES
=============================================================================*/

table th {
  font-weight: bold;
}

table th, table td {
  border: 1px solid #ccc;
  padding: 6px 13px;
}

table tr {
  border-top: 1px solid #ccc;
  background-color: #fff;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

/* IMAGES
=============================================================================*/

img {
  max-width: 100%
}
</style>
</head>
<body>
<h6>mmCrawler爬虫程序制作思路</h6>
<p>一.分析网站的内容结构</p>
<p>一般这类美女图片网站的内容结构基本如下</p>
<p><img src="readme_files/structure.png" alt="structrue"></p>
<p>二.分析22mm.cc的网页结构</p>
<ul>
<li>网站首页，可以用正则表达式将分类锚点提取出来</li>
<li>分类页面,可以用正则表达式将该页中属于该分类的图集锚点给提取出来</li>
<li>图集页面，在22mm.cc这个网站中，在图集最后一页的内部js代码里面包含了该图集下面所有图片的url,可以用正则将其提取出来</li>
</ul>
<p>三.程序的基本结构和工作流程</p>
<ul>
<li>
<p>开发坏境：win7/python 2.7.6</p>
</li>
<li>
<p>需要用到的库</p>
<ul>
<li>argparse</li>
<li>urllib</li>
<li>re</li>
<li>Queue</li>
<li>threading</li>
<li>os</li>
<li>sys</li>
<li>time</li>
<li>logging</li>
</ul>
</li>
<li>
程序大致结构
<ul>
<li>setcmdargs()  # 设置并解析命令行参数的函数</li>
<li>invokespider(cmdargs.u,cmdargs.n,cmdargs.d,cmdargs.l)  # 根据参数值对程序进行初始化</li>
<li>progressbar(pool)  # 实时更新程序的工作进度的函数</li>
<li>ThreadPool(threading.Thread) # 线程池类，该类的实例保存程序的公共信息</li>
<li>grabgirls(pool)  # 为工作线程分配任务</li>
<li>extractalbums(pool,category)  # 从分类页面中提取出图集锚点(text,url)</li>
<li>extractpics(pool,album)  # 提取图集下面所有图片的url{text:[url,url,..]}</li>
<li>downloadpic(pool,album,threadata=None)  # 控制工作线程递归下载图集下面的图片</li>
<li>retrievepic(pool,picurl,filename)  # 将图片下载到本地磁盘</li>
</ul>
</li>
<li>程序大致的工作流程</li>
</ul>
<p><img src="readme_files/mmCrawler.png" alt="workflow"></p>
<p>四.关于程序的复用性</p>
<p>程序的复用性可以用这一类网站相似的内容结构来实现，其它的美女网站可能不像22mm.cc一样在图集的最后一页包含所有图片的链接，但是基本都包
含了"下一页"的链接，在工作线程递归运行的函数也就是downloadpic函数里面修改代码，使得下载当前页图片的同时将下一页的url存储在
threadlocal实例里面，直至页面里面不再包含"下一页"链接则说明该图集的图片已经下载完毕，再针对不同的网站修改对应地方的正则表达式即可，
这样做会增加http请求数量，但是目前只想到这一种思路
用这种方法测试了<a href="http://www.7160.com">www.7160.com</a>和<a href="http://www.kanmm.cn">www.kanmm.cn</a>这两个美女网站一下，应该是可行的</p>



</body></html>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->